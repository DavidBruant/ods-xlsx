import test from 'ava';
import {join} from 'node:path';

import {fillOdtTemplate, getOdtTemplate, getOdtTextContent} from '../scripts/fillOdtTemplate.js'


test('basic template filling with variable substitution', async t => {
    

    const templatePath = join(import.meta.dirname, './data/template-anniversaire.odt')
    const templateContent = `Yo {nom}¬†! 
Tu es n√©.e le {dateNaissance}

Bonjoir ‚òÄÔ∏è
`

	const data = {
        nom: 'David Bruant',
        dateNaissance: '8 mars 1987'
    }

    const odtTemplate = await getOdtTemplate(templatePath)
    const templateTextContent = await getOdtTextContent(odtTemplate)
    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `Yo David Bruant¬†! 
Tu es n√©.e le 8 mars 1987

Bonjoir ‚òÄÔ∏è
`)

});



test('basic template filling with {#each}', async t => {
    const templatePath = join(import.meta.dirname, './data/enum-courses.odt')
    const templateContent = `üß∫ La liste de courses incroyable üß∫

{#each listeCourses as √©l√©ment}
{√©l√©ment}
{/each}
`

	const data = {
        listeCourses : [
            'Radis',
            `Jus d'orange`,
            'P√¢tes √† lasagne (fra√Æches !)'
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)

    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `üß∫ La liste de courses incroyable üß∫

Radis
Jus d'orange
P√¢tes √† lasagne (fra√Æches !)
`)


});



test('template filling with {#each} generating a list', async t => {
    const templatePath = join(import.meta.dirname, './data/liste-courses.odt')
    const templateContent = `üß∫ La liste de courses incroyable üß∫

- {#each listeCourses as √©l√©ment}
- {√©l√©ment}
- {/each}
`

	const data = {
        listeCourses : [
            'Radis',
            `Jus d'orange`,
            'P√¢tes √† lasagne (fra√Æches !)'
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)

    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `üß∫ La liste de courses incroyable üß∫

- Radis
- Jus d'orange
- P√¢tes √† lasagne (fra√Æches !)
`)


});


test('template filling with 2 sequential {#each}', async t => {
    const templatePath = join(import.meta.dirname, './data/liste-fruits-et-l√©gumes.odt')
    const templateContent = `Liste de fruits et l√©gumes

Fruits
{#each fruits as fruit}
{fruit}
{/each}

L√©gumes
{#each l√©gumes as l√©gume}
{l√©gume}
{/each}
`

	const data = {
        fruits : [
            'Past√®que üçâ',
            `Kiwi ü•ù`,
            'Banane üçå'
        ],
        l√©gumes: [
            'Champignon üçÑ‚Äçüü´',
            'Avocat ü•ë',
            'Poivron ü´ë'
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)    
    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `Liste de fruits et l√©gumes

Fruits
Past√®que üçâ
Kiwi ü•ù
Banane üçå

L√©gumes
Champignon üçÑ‚Äçüü´
Avocat ü•ë
Poivron ü´ë
`)

});



test('template filling with nested {#each}s', async t => {
    const templatePath = join(import.meta.dirname, './data/l√©gumes-de-saison.odt')
    const templateContent = `L√©gumes de saison

{#each l√©gumesSaison as saisonL√©gumes}
{saisonL√©gumes.saison}
- {#each saisonL√©gumes.l√©gumes as l√©gume}
- {l√©gume}
- {/each}

{/each}
`

	const data = {
        l√©gumesSaison : [
            {
                saison: 'Printemps',
                l√©gumes: [
                    'Asperge',
                    'Betterave',
                    'Blette'
                ]
            },
            {
                saison: '√ât√©',
                l√©gumes: [
                    'Courgette',
                    'Poivron',
                    'Laitue'
                ]
            },
            {
                saison: 'Automne',
                l√©gumes: [
                    'Poireau',
                    'Potiron',
                    'Brocoli'
                ]
            },
            {
                saison: 'Hiver',
                l√©gumes: [
                    'Radis',
                    'Chou de Bruxelles',
                    'Fris√©e'
                ]
            }
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)    
    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `L√©gumes de saison

Printemps
- Asperge
- Betterave
- Blette

√ât√©
- Courgette
- Poivron
- Laitue

Automne
- Poireau
- Potiron
- Brocoli

Hiver
- Radis
- Chou de Bruxelles
- Fris√©e

`)

});